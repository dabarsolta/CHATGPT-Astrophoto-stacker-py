# stackAI v0 - TEST TEST TEST TEST
# work in progress
# AUTOMATIC (ASTRO)PHOTO STACKING SCRIPT WITHOUT USING INTERMEDIATE IMAGES
# USING NUMPY PILLOW PYWT
# MADE BY OPENAI CHATGPT - THE ARTIFICIAL ASTROPHOTOGRAPHER
# WITH INSIGNIFICANT ASSISTANCE FROM HUMAN

import os
import numpy as np
import multiprocessing as mp
import pywt
from PIL import Image


def process_image(filename):
    # Open the image and calculate the quality metric
    image = Image.open(filename)
    quality = np.max(image) - np.mean(image)

    # Use wavelet decomposition to identify and remove out-of-focus pixels
    coeffs = pywt.dwt2(image, "haar")
    LL, (LH, HL, HH) = coeffs
    threshold = np.mean(HH) + 2 * np.std(HH)
    HH[HH < threshold] = 0
    coeffs = LL, (LH, HL, HH)
    image = pywt.idwt2(coeffs, "haar")

    # Save the adjustments as a text file
    adj_filename = os.path.splitext(filename)[0] + "_adj.txt"
    with open(adj_filename, "w") as f:
        f.write("Quality: {}\n".format(quality))
        # Add any other adjustments you want to save here

    return quality, np.array(image)


def reject_static_pixels(images):
    # Find pixels that have the same value in every image
    static_pixels = np.all(images == images[0], axis=0)

    # Replace static pixels with the average value of the neighboring pixels
    kernel = np.ones((3, 3))
    kernel[1, 1] = 0
    for i in range(images.shape[0]):
        mask = static_pixels[i]
        images[i][mask] = np.mean([
            np.roll(np.roll(images[i], -j, axis=0), -k, axis=1)[~mask] * kernel[~mask]
            for j in range(-1, 2) for k in range(-1, 2)
        ], axis=0)

    return images


def align_images(images):
    # Find a reference image
    ref_index = np.argmax(np.sum(images, axis=(1, 2)))

    # Calculate cross-correlation with reference image for each image
    corr = np.array([
        np.fft.ifft2(
            np.fft.fft2(images[ref_index]) *
            np.fft.fft2(np.roll(np.roll(image, -j, axis=0), -k, axis=1), axes=(0, 1)).conj()
        ).real
        for j in range(-10, 11) for k in range(-10, 11)
    ])
    shift = np.array([np.unravel_index(np.argmax(c), c.shape) - np.array(c.shape) // 2 for c in corr])
    shift_index = np.argmin(np.sum(shift ** 2, axis=1))

    # Apply shifts to align images
    aligned_images = []
    for i in range(images.shape[0]):
        offset = shift[shift_index]
        aligned_image = np.roll(np.roll(images[i], -offset[0], axis=0), -offset[1], axis=1)
        aligned_images.append(aligned_image)

    return np.array(aligned_images)


if __name__ == "__main__":
    # Get the user's preferred RAM and thread settings
    max_ram = int(input("Enter maximum RAM usage (in GB): "))
    num_threads = int(input("Enter number of threads to use: "))

    # Get the source photo folder location from the user
    source_folder = input("Enter the source photo folder location: ")
  
    # Get the list of image filenames
    filenames = []
    for filename in os.listdir(source_folder):
        if filename.lower().endswith('.jpg'):
            filenames.append(os.path.join(source_folder, filename))

    # Process the images in parallel and collect the results
    pool = mp.Pool(processes=num_threads)
    results = pool.map(process_image, filenames)

    # Sort the images by quality and select the top N for stacking
    N = int(input("Enter the number of images to stack: "))
    indices = np.argsort([result[0] for result in results])[-N:]
    stack = np.mean([results[i][1] for i in indices], axis=0)

    #Save the stacked image as a JPEG file with the same name as the first input image
    output_filename = os.path.splitext(filenames[0])[0] + "_stacked"
    Image.fromarray(stack.astype(np.uint8)).save(output_filename + ".png")

    print("Image stacking complete OK. Stacked image saved to {}".format(output_filename))
